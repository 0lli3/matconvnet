function imagenet()
run(fullfile(fileparts(mfilename('fullpath')), '../matlab/vl_setupnn.m')) ;
opts.expDir = 'data/imagenet' ;
opts.numEpochs = 100 ;
opts.batchSize = 4 ;
opts.useGpu = false ;
opts.learningRate = 0.01 ;


% -------------------------------------------------------------------------
%                                                    Network initialization
% -------------------------------------------------------------------------

net.layers = {} ;

% Block 1
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', 0.01*randn(11, 11, 3, 96, 'single'), ...
                           'biases', ones(1, 96, 'single'), ...
                           'stride', 4, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'normalize', ...
                           'param', [5 1 0.0001/5 0.75], ...
                           'stride', 2, ...
                           'pad', 0) ;

% Block 2
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', 0.01*randn(5, 5, 48, 256, 'single'), ...
                           'biases', ones(1, 256, 'single'), ...
                           'stride', 1, ...
                           'pad', 2) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'normalize', ...
                           'param', [5 1 0.0001/5 0.75], ...
                           'stride', 2, ...
                           'pad', 0) ;

% Block 3
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', 0.01*randn(3,3,256,384,'single'), ...
                           'biases', ones(1,384,'single'), ...
                           'stride', 1, ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'relu') ;

% Block 4
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', 0.01*randn(3,3,192,384,'single'), ...
                           'biases', ones(1,384,'single'), ...
                           'stride', 1, ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'relu') ;

% Block 5
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', 0.01*randn(3,3,192,256,'single'), ...
                           'biases', ones(1,256,'single'), ...
                           'stride', 1, ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', 0) ;

% Block 6
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', 0.01*randn(6,6,256,4096,'single'),...
                           'biases', ones(1,4096,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;

% Block 7
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', 0.01*randn(1,1,4096,4096,'single'),...
                           'biases', ones(1,4096,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;

% Block 8
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', 0.01*randn(1,1,4096,1000,'single'), ...
                           'biases', zeros(1, 1000, 'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;

% Block 9
net.layers{end+1} = struct('type', 'softmax') ;

% Block 10 loss
net.layers{end+1} = struct('type', 'loss') ;

for i=1:numel(net.layers)
  if ~strcmp(net.layers{i}.type,'conv'), continue; end
  net.layers{i}.filtersMomentum = zeros('like',net.layers{i}.filters) ; 
  net.layers{i}.biasesMomentum = zeros('like',net.layers{i}.biases) ;
end

if opts.useGpu
  net = vl_simplenn_move(net, 'gpu') ;
end

% -------------------------------------------------------------------------
%
% -------------------------------------------------------------------------

n = 10000 ;
v = 1000 ;
t = 1000 ;
imdb.images.id = ones(1, n+v+t) ;
imdb.images.label = randi(1000, n+v+t) ;
imdb.images.set = [ones(1,n) 2*ones(1,v) 3*ones(1,t)] ;
imdb.images.name = cell(1, n+v+t) ;
train = find(imdb.images.set==1) ;
val = find(imdb.images.set==2) ;

for epoch=1:100
  modelPath = fullfile(opts.expDir, 'net-epoch-%d.mat') ;
  if exist(sprintf(modelPath, epoch+1),'file'), continue ; end
  if exist(sprintf(modelPath, epoch), 'file')
    sprintf('resuming from epoch %d\n', epoch) ;
    net = load(sprintf(modelPath, epoch)) ;
  end
  
  for t=1:opts.batchSize:numel(train)
    % get next image batch and labels
    batch = train(t:min(t+opts.batchSize-1, numel(train))) ;
    fprintf('processing batch starting with image %d\n', batch(1)) ;
    [im, labels] = getBatch(opts, imdb, batch) ;
    
    % backprop
    net.layers{end}.class = labels ;
    res = vl_simplenn(net, im, 1) ;
    imdb.images.score(batch) = res(end-1).x(1,1,labels+(0:1000:1000*numel(batch)-1)) ;
    
    % gradient descent
    for l=1:numel(net.layers)
      ly = net.layers{l} ;
      if ~strcmp(ly.type, 'conv'), continue ; end
      
      ly.filtersMomentum = ...
        0.9*ly.filtersMomentum - ...
        0.0005 * opts.learningRate * ly.filters - ...
        opts.learningRate * res(l).dzdw{1} ;
      ly.filters = ly.filters + ly.filtersMomentum ;

      ly.biasesMomentum = ...
        0.9*ly.biasesMomentum - ...
        0.0005 * opts.learningRate * ly.biases - ...
        opts.learningRate * res(l).dzdw{2} ;
      ly.biases = ly.biases + ly.biasesMomentum ;           
    end        
  end % next batch
  
  % evaluation on validation set
end


function [im, labels] = getBatch(opts, imdb, batch)
im = randn(227, 227, 3, opts.batchSize, 'single') ;
labels = imdb.images.label(batch) ;
