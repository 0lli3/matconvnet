function net = cnn_cifar_init_nin(opts)

% Define network CIFAR10-quick
net.layers = {} ;

% Block 1
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{1e-4*randn(8,8,3,96, 'single'), zeros(1, 96, 'single')}}, ...
                           'learningRate', [1 2], ...
                           'stride', 1, ...
                           'pad', 4) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [4 4], ...
                           'stride', 2, ...
                           'pad', 2) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{1e-4*randn(1,1,96,96, 'single'), zeros(1, 96, 'single')}}, ...
                           'learningRate', [1 2], ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;

% Block 2
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(8,8,96,192, 'single'), zeros(1,192,'single')}}, ...
                           'learningRate', [1 2], ...
                           'stride', 1, ...
                           'pad', 3) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [4 4], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{1e-4*randn(1,1,192,192, 'single'), zeros(1,192, 'single')}}, ...
                           'learningRate', [1 2], ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
                         
% Block 3
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(3,3,192,192, 'single'), zeros(1,192,'single')}}, ...
                           'learningRate', [1 2], ...
                           'stride', 1, ...
                           'pad', 2) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{1e-4*randn(1,1,192,10, 'single'), zeros(1, 10, 'single')}}, ...
                           'learningRate', [1 2], ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;


% Global pooling
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'avg', ...
                           'pool', [4 4], ...
                           'stride', 1, ...
                           'pad', 0) ;
% Loss layer
net.layers{end+1} = struct('type', 'softmaxloss') ;

vl_simplenn_display(net,'inputSize', [32 32 3 256])

keyboard